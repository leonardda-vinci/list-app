{"ast":null,"code":"var _jsxFileName = \"D:\\\\C_drive\\\\Practice\\\\space-x\\\\list-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Your imports and other code...\n\nconst App = () => {\n  _s();\n  const [tableData, setTableData] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(1);\n  const loaderRef = useRef(null);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(`https://api.spacexdata.com/v4/launches/?limit=10&page=${page}`);\n      const data = response.data;\n      if (data.length === 0) {\n        setHasMore(false);\n        return;\n      }\n      setTableData(prevData => [...prevData, ...data]);\n      setPage(prevPage => prevPage + 1);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const handleIntersection = entries => {\n    const target = entries[0];\n    if (target.isIntersecting && hasMore) {\n      fetchData();\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.1 // Adjust the threshold as needed\n    };\n    const observer = new IntersectionObserver(handleIntersection, options);\n    if (loaderRef.current) {\n      observer.observe(loaderRef.current);\n    }\n    return () => {\n      if (loaderRef.current) {\n        observer.unobserve(loaderRef.current);\n      }\n    };\n  }, [loaderRef, hasMore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ywyB7s46CJUiK5KNUVQXAoph7JE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","tableData","setTableData","useState","hasMore","setHasMore","page","setPage","loaderRef","useRef","fetchData","response","axios","get","data","length","prevData","prevPage","error","console","handleIntersection","entries","target","isIntersecting","useEffect","options","root","rootMargin","threshold","observer","IntersectionObserver","current","observe","unobserve","_jsxDEV","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/C_drive/Practice/space-x/list-app/src/App.js"],"sourcesContent":["// Your imports and other code...\r\n\r\nconst App = () => {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [page, setPage] = useState(1);\r\n  const loaderRef = useRef(null);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(`https://api.spacexdata.com/v4/launches/?limit=10&page=${page}`);\r\n      const data = response.data;\r\n\r\n      if (data.length === 0) {\r\n        setHasMore(false);\r\n        return;\r\n      }\r\n\r\n      setTableData(prevData => [...prevData, ...data]);\r\n      setPage(prevPage => prevPage + 1);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleIntersection = (entries) => {\r\n    const target = entries[0];\r\n    if (target.isIntersecting && hasMore) {\r\n      fetchData();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      root: null,\r\n      rootMargin: '0px',\r\n      threshold: 0.1, // Adjust the threshold as needed\r\n    };\r\n\r\n    const observer = new IntersectionObserver(handleIntersection, options);\r\n    if (loaderRef.current) {\r\n      observer.observe(loaderRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (loaderRef.current) {\r\n        observer.unobserve(loaderRef.current);\r\n      }\r\n    };\r\n  }, [loaderRef, hasMore]);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      {/* Your JSX code */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;;AAAA;;AAEA,MAAMA,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAMK,SAAS,GAAGC,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAE,yDAAwDP,IAAK,EAAC,CAAC;MACjG,MAAMQ,IAAI,GAAGH,QAAQ,CAACG,IAAI;MAE1B,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QACrBV,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEAH,YAAY,CAACc,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE,GAAGF,IAAI,CAAC,CAAC;MAChDP,OAAO,CAACU,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAME,kBAAkB,GAAIC,OAAO,IAAK;IACtC,MAAMC,MAAM,GAAGD,OAAO,CAAC,CAAC,CAAC;IACzB,IAAIC,MAAM,CAACC,cAAc,IAAInB,OAAO,EAAE;MACpCM,SAAS,CAAC,CAAC;IACb;EACF,CAAC;EAEDc,SAAS,CAAC,MAAM;IACdd,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENc,SAAS,CAAC,MAAM;IACd,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,GAAG,CAAE;IAClB,CAAC;IAED,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAACV,kBAAkB,EAAEK,OAAO,CAAC;IACtE,IAAIjB,SAAS,CAACuB,OAAO,EAAE;MACrBF,QAAQ,CAACG,OAAO,CAACxB,SAAS,CAACuB,OAAO,CAAC;IACrC;IAEA,OAAO,MAAM;MACX,IAAIvB,SAAS,CAACuB,OAAO,EAAE;QACrBF,QAAQ,CAACI,SAAS,CAACzB,SAAS,CAACuB,OAAO,CAAC;MACvC;IACF,CAAC;EACH,CAAC,EAAE,CAACvB,SAAS,EAAEJ,OAAO,CAAC,CAAC;EAExB,oBACE8B,OAAA;IAAKC,SAAS,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEzB,CAAC;AAEV,CAAC;AAAAvC,EAAA,CA1DKD,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AA4DT,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}